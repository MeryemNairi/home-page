import * as React from 'react';
import { useState, useEffect } from 'react';
import { sp } from '@pnp/sp';
import styles from './Qlinks.module.scss';
import * as XLSX from 'xlsx';
import { WebPartContext } from '@microsoft/sp-webpart-base';


export interface IFormData {
    Nom: string;
    Prenom: string;
    Birthday: Date; // DÃ©finir le type de Birthday comme Date

}

interface ILatestNewsProps {
    context: WebPartContext;

}

interface InternalOffersItem {
    offre_title: string;
    short_description: string;
    deadline: string;
    city: string;
    fileUrl: string;
}

const Qlinks: React.FC<ILatestNewsProps> = (props: ILatestNewsProps) => {
    const [JobsData, setJobsData] = useState<InternalOffersItem[]>([]);
    const [filteredJobs, setFilteredJobs] = useState<InternalOffersItem[]>([]);
    const [searchTerm, setSearchTerm] = useState<string>('');


    // Function to format the deadline
    const formatDeadline = (deadline: string): string => {
        const date = new Date(deadline);
        const options: Intl.DateTimeFormatOptions = { year: 'numeric', month: 'long', day: 'numeric' };
        return date.toLocaleDateString('fr-FR', options);
    };

    const fetchJobsData = async () => {
        try {
            const response = await sp.web.lists.getByTitle("BackOfficeV1").items.select("offre_title", "short_description", "deadline", "city", "fileUrl").get();
            console.log("Internal Jobs data response:", response);
            if (response && response.length > 0) {
                return response;
            } else {
                console.error("Empty response received for Internal Jobs data.");
                return [];
            }
        } catch (error) {
            console.error("Error fetching Internal Jobs data:", error);
            return [];
        }
    };

    useEffect(() => {
        const getData = async () => {
            const InternalJobs = await fetchJobsData();
            setJobsData(InternalJobs);
            setFilteredJobs(InternalJobs); // Initialize filtered jobs with all jobs -- working
            console.log("InternalJobs data:", InternalJobs);
        };
        getData();
    }, []);

    const handleSearch = (event: React.ChangeEvent<HTMLInputElement>) => {
        const searchTerm = event.target.value.toLowerCase();
        setSearchTerm(searchTerm);

        // Filter jobs based on search term -it's work BINGO
        const filteredJobs = JobsData.filter(job =>
            job.offre_title.toLowerCase().includes(searchTerm)
        );
        setFilteredJobs(filteredJobs);
    };



    const [isPlaying, setIsPlaying] = React.useState<boolean>(false);
    const videoRef = React.useRef<HTMLVideoElement>(null);


    React.useEffect(() => {
        if (isPlaying && videoRef.current) {
            videoRef.current.play();
        } else if (!isPlaying && videoRef.current) {
            videoRef.current.pause();
        }
    }, [isPlaying]);

    const handleTogglePlay = () => {
        setIsPlaying(!isPlaying);
    };

    //-------------------------------> Importing the video from the Document Library in sharepoint <----------------

    const [videos, setVideos] = React.useState<string[]>([]);

    React.useEffect(() => {
        fetchVideosFromSharePoint();
    }, []);

    const fetchVideosFromSharePoint = async () => {
        try {
            const response = await fetch(
                `${props.context.pageContext.web.absoluteUrl}/_api/web/lists/getByTitle('CommVideos')/items?$select=FileRef`,
                {
                    headers: {
                        Accept: 'application/json;odata=nometadata',
                    },
                }
            );
            const data = await response.json();
            const videoUrls = data.value.map((item: any) => item.FileRef);
            setVideos(videoUrls);
        } catch (error) {
            console.error('Error fetching videos:', error);
        }
    };



    const [images, setImages] = useState<string[]>([]);


    //Birthdaaaaaaaaaaay code
    const [formEntries, setFormEntries] = useState<IFormData[]>([]);
    const [currentIndex1, setCurrentIndex1] = useState(0);

    useEffect(() => {
        fetchFormData();
    }, []);

    useEffect(() => {
        const interval = setInterval(() => {
            setCurrentIndex1(prevIndex => (prevIndex + 3 < formEntries.length ? prevIndex + 3 : 0));
        }, 5000);

        return () => clearInterval(interval);
    }, [formEntries]);

    const fetchFormData = async () => {
        try {
            const formData = await readExcelFile();
            const filteredFormData = formData.filter(entry => isToday(entry.Birthday));
            setFormEntries(filteredFormData);
        } catch (error) {
            console.error('Error fetching form data:', error);
        }
    };

    const readExcelFile = async (): Promise<IFormData[]> => {
        try {
            const response = await fetch('https://cnexia.sharepoint.com/sites/CnexiaForEveryone/Shared%20Documents/query.xlsx');
            const data = await response.arrayBuffer();

            const workbook = XLSX.read(data, { type: 'array' });
            const sheetName = workbook.SheetNames[0];
            const worksheet = workbook.Sheets[sheetName];

            const rawData = XLSX.utils.sheet_to_json(worksheet, { header: 1, raw: true });

            const formData: IFormData[] = rawData
                .slice(1)
                .map((row: any) => ({
                    Nom: row[0],
                    Prenom: row[1],
                    Birthday: parseDate(row[2]) as Date,
                }));

            return formData;
        } catch (error) {
            console.error('Error reading Excel file:', error);
            throw new Error('An error occurred while reading Excel file. Please try again.');
        }
    };

    const parseDate = (dateString: any): Date | string => {
        if (!dateString) return '';

        if (typeof dateString === 'number') {
            return new Date((dateString - (25567 + 1)) * 86400 * 1000);
        } else if (typeof dateString === 'string') {
            return new Date(dateString);
        } else {
            return dateString;
        }
    };

    const isToday = (someDate: Date): boolean => {
        const today = new Date();
        return someDate.getDate() === today.getDate() &&
            someDate.getMonth() === today.getMonth();
    };


    //reste code



    const [currentIndex, setCurrentIndex] = useState<number>(0); // Add type annotation for currentIndex

    const goToPrevSlide = () => {
        const newIndex = (currentIndex === 0) ? images.length - 1 : currentIndex - 1;
        setCurrentIndex(newIndex);
    };

    const goToNextSlide = () => {
        const newIndex = (currentIndex === images.length - 1) ? 0 : currentIndex + 1;
        setCurrentIndex(newIndex);
    };

    useEffect(() => {
        const interval = setInterval(() => {
            goToNextSlide();
        }, 2000); // Change slide every 2 seconds

        return () => clearInterval(interval); // Cleanup interval on component unmount
    }, [currentIndex]);


    // -------------------------> Fetching Images from a document libray <---------------------
    useEffect(() => {

        const fetchImages = async () => {
            try {
                const response = await sp.web.lists.getByTitle("MediaTek").items.select('FileRef').get();
                const imageUrls = response.map(item => item.FileRef);
                setImages(imageUrls);
            } catch (error) {
                console.error('Error fetching images:', error);
            }
        };

        fetchImages();
    }, []);



    return (
        <div style={{ backgroundColor: '#fff' }}>
            <div style={{ display: 'flex', backgroundColor: '#fff' }}>

                <div style={{ width: '33%', display: 'flex', flexDirection: 'column' }}>
                    <div style={{ display: 'flex', alignItems: 'center', borderBottom: '1px solid #ccc', marginBottom: '10px' }}>
                        <svg width="538" height="58" viewBox="0 0 538 58" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <line x1="4.37114e-08" y1="57.5" x2="538" y2="57.5" stroke="black" stroke-opacity="0.1" />
                            <circle cx="39" cy="22" r="22" fill="#00AB7B" />
                            <path d="M74.73 29V10.8H82.894C84.9913 10.8 86.6033 11.2247 87.73 12.074C88.8567 12.906 89.42 14.05 89.42 15.506C89.42 16.494 89.1947 17.326 88.744 18.002C88.3107 18.678 87.7213 19.198 86.976 19.562C86.2307 19.926 85.4247 20.108 84.558 20.108L85.026 19.328C86.066 19.328 86.9847 19.51 87.782 19.874C88.5793 20.238 89.212 20.7753 89.68 21.486C90.148 22.1793 90.382 23.046 90.382 24.086C90.382 25.646 89.7927 26.8593 88.614 27.726C87.4527 28.5753 85.7193 29 83.414 29H74.73ZM77.33 26.894H83.31C84.7487 26.894 85.8493 26.6513 86.612 26.166C87.3747 25.6807 87.756 24.918 87.756 23.878C87.756 22.8207 87.3747 22.0493 86.612 21.564C85.8493 21.0787 84.7487 20.836 83.31 20.836H77.096V18.73H82.66C83.9773 18.73 85 18.4873 85.728 18.002C86.456 17.5167 86.82 16.7887 86.82 15.818C86.82 14.8473 86.456 14.1193 85.728 13.634C85 13.1487 83.9773 12.906 82.66 12.906H77.33V26.894ZM94.0437 29V15.22H96.5397V29H94.0437ZM95.2917 12.568C94.8064 12.568 94.3991 12.412 94.0697 12.1C93.7577 11.788 93.6017 11.4067 93.6017 10.956C93.6017 10.488 93.7577 10.098 94.0697 9.786C94.3991 9.474 94.8064 9.318 95.2917 9.318C95.7771 9.318 96.1757 9.474 96.4877 9.786C96.8171 10.0807 96.9817 10.4533 96.9817 10.904C96.9817 11.372 96.8257 11.7707 96.5137 12.1C96.2017 12.412 95.7944 12.568 95.2917 12.568ZM101.305 29V15.22H103.697V18.964L103.463 18.028C103.845 17.0747 104.486 16.3467 105.387 15.844C106.289 15.3413 107.398 15.09 108.715 15.09V17.508C108.611 17.4907 108.507 17.482 108.403 17.482C108.317 17.482 108.23 17.482 108.143 17.482C106.809 17.482 105.751 17.8807 104.971 18.678C104.191 19.4753 103.801 20.628 103.801 22.136V29H101.305ZM117.082 29.156C115.696 29.156 114.621 28.7833 113.858 28.038C113.096 27.2927 112.714 26.2267 112.714 24.84V12.204H115.21V24.736C115.21 25.4813 115.392 26.0533 115.756 26.452C116.138 26.8507 116.675 27.05 117.368 27.05C118.148 27.05 118.798 26.8333 119.318 26.4L120.098 28.194C119.717 28.5233 119.258 28.766 118.72 28.922C118.2 29.078 117.654 29.156 117.082 29.156ZM110.374 17.274V15.22H119.162V17.274H110.374ZM130.474 15.09C131.601 15.09 132.589 15.3067 133.438 15.74C134.305 16.1733 134.981 16.832 135.466 17.716C135.951 18.6 136.194 19.718 136.194 21.07V29H133.698V21.356C133.698 20.0213 133.369 19.016 132.71 18.34C132.069 17.664 131.159 17.326 129.98 17.326C129.096 17.326 128.325 17.4993 127.666 17.846C127.007 18.1927 126.496 18.704 126.132 19.38C125.785 20.056 125.612 20.8967 125.612 21.902V29H123.116V9.708H125.612V18.938L125.118 17.95C125.569 17.0487 126.262 16.3467 127.198 15.844C128.134 15.3413 129.226 15.09 130.474 15.09ZM146.507 29.156C145.173 29.156 143.977 28.8613 142.919 28.272C141.879 27.6827 141.056 26.8593 140.449 25.802C139.843 24.7447 139.539 23.514 139.539 22.11C139.539 20.706 139.843 19.484 140.449 18.444C141.056 17.3867 141.879 16.5633 142.919 15.974C143.977 15.3847 145.173 15.09 146.507 15.09C147.669 15.09 148.717 15.35 149.653 15.87C150.589 16.39 151.335 17.17 151.889 18.21C152.461 19.25 152.747 20.55 152.747 22.11C152.747 23.67 152.47 24.97 151.915 26.01C151.378 27.05 150.641 27.8387 149.705 28.376C148.769 28.896 147.703 29.156 146.507 29.156ZM146.715 26.972C147.582 26.972 148.362 26.7727 149.055 26.374C149.766 25.9753 150.321 25.412 150.719 24.684C151.135 23.9387 151.343 23.0807 151.343 22.11C151.343 21.122 151.135 20.2727 150.719 19.562C150.321 18.834 149.766 18.2707 149.055 17.872C148.362 17.4733 147.582 17.274 146.715 17.274C145.831 17.274 145.043 17.4733 144.349 17.872C143.656 18.2707 143.101 18.834 142.685 19.562C142.269 20.2727 142.061 21.122 142.061 22.11C142.061 23.0807 142.269 23.9387 142.685 24.684C143.101 25.412 143.656 25.9753 144.349 26.374C145.043 26.7727 145.831 26.972 146.715 26.972ZM151.421 29V25.282L151.577 22.084L151.317 18.886V9.708H153.813V29H151.421ZM167.09 29V26.088L166.96 25.542V20.576C166.96 19.5187 166.648 18.704 166.024 18.132C165.417 17.5427 164.499 17.248 163.268 17.248C162.453 17.248 161.656 17.3867 160.876 17.664C160.096 17.924 159.437 18.2793 158.9 18.73L157.86 16.858C158.571 16.286 159.42 15.8527 160.408 15.558C161.413 15.246 162.462 15.09 163.554 15.09C165.443 15.09 166.899 15.5493 167.922 16.468C168.945 17.3867 169.456 18.7907 169.456 20.68V29H167.09ZM162.566 29.156C161.543 29.156 160.642 28.9827 159.862 28.636C159.099 28.2893 158.51 27.8127 158.094 27.206C157.678 26.582 157.47 25.88 157.47 25.1C157.47 24.3547 157.643 23.6787 157.99 23.072C158.354 22.4653 158.935 21.98 159.732 21.616C160.547 21.252 161.639 21.07 163.008 21.07H167.376V22.864H163.112C161.864 22.864 161.023 23.072 160.59 23.488C160.157 23.904 159.94 24.4067 159.94 24.996C159.94 25.672 160.209 26.218 160.746 26.634C161.283 27.0327 162.029 27.232 162.982 27.232C163.918 27.232 164.733 27.024 165.426 26.608C166.137 26.192 166.648 25.5853 166.96 24.788L167.454 26.504C167.125 27.3187 166.544 27.9687 165.712 28.454C164.88 28.922 163.831 29.156 162.566 29.156ZM174.419 34.2C173.76 34.2 173.119 34.0873 172.495 33.862C171.871 33.654 171.334 33.342 170.883 32.926L171.949 31.054C172.296 31.3833 172.677 31.6347 173.093 31.808C173.509 31.9813 173.951 32.068 174.419 32.068C175.026 32.068 175.528 31.912 175.927 31.6C176.326 31.288 176.698 30.7333 177.045 29.936L177.903 28.038L178.163 27.726L183.571 15.22H186.015L179.333 30.378C178.934 31.3487 178.484 32.1113 177.981 32.666C177.496 33.2207 176.958 33.6107 176.369 33.836C175.78 34.0787 175.13 34.2 174.419 34.2ZM177.695 29.442L171.403 15.22H174.003L179.359 27.492L177.695 29.442ZM192.119 29.156C190.975 29.156 189.883 29 188.843 28.688C187.82 28.376 187.014 27.9947 186.425 27.544L187.465 25.568C188.054 25.9667 188.782 26.3047 189.649 26.582C190.515 26.8593 191.399 26.998 192.301 26.998C193.462 26.998 194.294 26.8333 194.797 26.504C195.317 26.1747 195.577 25.7153 195.577 25.126C195.577 24.6927 195.421 24.3547 195.109 24.112C194.797 23.8693 194.381 23.6873 193.861 23.566C193.358 23.4447 192.795 23.3407 192.171 23.254C191.547 23.15 190.923 23.0287 190.299 22.89C189.675 22.734 189.103 22.526 188.583 22.266C188.063 21.9887 187.647 21.616 187.335 21.148C187.023 20.6627 186.867 20.0213 186.867 19.224C186.867 18.392 187.101 17.664 187.569 17.04C188.037 16.416 188.695 15.9393 189.545 15.61C190.411 15.2633 191.434 15.09 192.613 15.09C193.514 15.09 194.424 15.2027 195.343 15.428C196.279 15.636 197.041 15.9393 197.631 16.338L196.565 18.314C195.941 17.898 195.291 17.612 194.615 17.456C193.939 17.3 193.263 17.222 192.587 17.222C191.495 17.222 190.68 17.404 190.143 17.768C189.605 18.1147 189.337 18.5653 189.337 19.12C189.337 19.588 189.493 19.952 189.805 20.212C190.134 20.4547 190.55 20.6453 191.053 20.784C191.573 20.9227 192.145 21.044 192.769 21.148C193.393 21.2347 194.017 21.356 194.641 21.512C195.265 21.6507 195.828 21.85 196.331 22.11C196.851 22.37 197.267 22.734 197.579 23.202C197.908 23.67 198.073 24.294 198.073 25.074C198.073 25.906 197.83 26.6253 197.345 27.232C196.859 27.8387 196.175 28.3153 195.291 28.662C194.407 28.9913 193.349 29.156 192.119 29.156Z" fill="black" />
                            <g clip-path="url(#clip0_252_3)" filter="url(#filter0_d_252_3)">
                                <path d="M25 32.653C27.2801 27.4733 29.5603 22.2937 31.8468 17.1141C32.2056 16.3017 33.1774 15.6791 34.3397 15.897C34.7208 15.9686 35.0955 16.0807 35.5083 16.1834C35.8037 15.5266 36.4039 15.0846 36.9152 14.5741C37.5789 13.9142 38.3855 13.7181 39.2969 13.9516C39.5859 14.0263 39.8717 14.1072 40.2052 14.2006C40.0781 13.7523 39.9575 13.3446 39.8495 12.9368C39.5923 11.9687 40.1798 11.0598 41.1801 10.8699C41.9518 10.7236 42.7679 11.1688 43.0284 11.9189C43.2538 12.5695 43.4634 13.2263 43.619 13.8955C43.8 14.6768 43.5936 15.3865 43.0315 15.9748C42.7076 16.3141 42.3742 16.6441 42.028 16.9585C41.3675 17.5592 40.5926 17.7335 39.7256 17.5032C39.4367 17.4254 39.154 17.3289 38.792 17.2137C39.027 17.7491 38.9698 18.3125 39.4557 18.7234C41.1547 20.1677 42.6219 21.805 43.6889 23.7598C44.0477 24.4135 44.3272 25.1014 44.4415 25.8423C44.5273 26.3994 44.4225 26.9286 44.2161 27.4391C44.0287 27.9029 43.6476 28.1831 43.184 28.376C40.3989 29.5464 37.6202 30.7231 34.8383 31.8966C32.574 32.8522 30.3097 33.8078 28.0455 34.7603C26.6482 35.3486 25.4954 34.8163 25.0413 33.3845C25.0381 33.3689 25.0159 33.3596 25.0064 33.3471C25.0064 33.1136 25.0064 32.8833 25.0064 32.6499L25 32.653ZM41.4342 27.9403C37.2359 26.0726 34.2 23.0657 32.2056 19.0222C32.1897 19.0534 32.1485 19.1405 32.1104 19.2277C31.4625 20.6907 30.8147 22.1568 30.1668 23.6198C28.8553 26.5831 27.5437 29.5433 26.2449 32.5098C26.1559 32.7121 26.0988 32.9674 26.1337 33.179C26.2417 33.8109 26.8768 34.0848 27.531 33.8078C30.5892 32.5191 33.6474 31.2273 36.7056 29.9355C38.2934 29.2663 39.8813 28.597 41.4373 27.9403H41.4342ZM39.0333 19.788C39.0016 19.8222 38.9762 19.844 38.9571 19.872C38.5379 20.4572 37.9568 20.7031 37.2486 20.5786C36.5627 20.4572 36.1244 20.0276 35.9307 19.3677C35.7433 18.7265 35.5623 18.0822 35.3718 17.441C35.3527 17.3756 35.2892 17.2915 35.2257 17.2729C34.8192 17.1546 34.4095 16.9989 33.9935 16.9554C33.2949 16.8838 33.044 17.1795 33.1297 17.8643C33.225 18.6145 33.5426 19.2837 33.9205 19.928C35.0669 21.8922 36.6166 23.5139 38.4046 24.924C39.3731 25.6866 40.3989 26.3714 41.5866 26.7668C41.9581 26.8913 42.3646 26.9442 42.7584 26.966C43.1268 26.9878 43.311 26.8041 43.3554 26.4399C43.419 25.9388 43.2538 25.4812 43.0728 25.0236C42.2535 25.422 41.5961 25.3069 41.2119 24.7186C41.0372 24.4509 40.9832 24.1552 41.034 23.847C41.1134 23.3801 41.4278 23.0844 41.8565 22.8852C41.0213 21.7397 40.0845 20.7187 39.0333 19.7911V19.788ZM37.2518 15.813C36.5785 16.2581 36.3213 16.8059 36.4928 17.4378C36.6452 17.995 36.8167 18.5491 36.9914 19.1032C37.0962 19.4362 37.3947 19.5981 37.7123 19.514C38.0203 19.4331 38.1918 19.1312 38.1092 18.795C38.0648 18.6145 38.0108 18.4339 37.9568 18.2534C37.7218 17.4441 37.4868 16.6316 37.2518 15.813ZM41.793 15.6978C41.974 15.5079 42.0979 15.3772 42.2217 15.2496C42.5393 14.9165 42.6536 14.5181 42.5425 14.0854C42.3869 13.4909 42.1995 12.9026 42.0121 12.3143C41.9105 12.0061 41.6152 11.8598 41.323 11.9376C41.0086 12.0248 40.8403 12.2893 40.9102 12.6193C40.9546 12.8279 41.0181 13.0333 41.0785 13.2387C41.3103 14.0356 41.5421 14.8294 41.793 15.6978ZM38.1251 14.9757C38.2331 15.3149 38.3029 15.5733 38.3982 15.8223C38.4236 15.8939 38.4998 15.9717 38.5697 15.9966C39.0778 16.1678 39.5859 16.3328 40.0972 16.4822C40.3513 16.5569 40.6117 16.5445 40.8784 16.4075C40.78 16.1025 40.6942 15.8036 40.5863 15.511C40.564 15.455 40.4751 15.4021 40.4084 15.3803C39.9289 15.2402 39.4525 15.0877 38.9667 14.985C38.7126 14.9321 38.4395 14.9757 38.1251 14.9757ZM42.8346 24.0587C42.8346 23.738 42.5774 23.4797 42.2503 23.4828C41.9359 23.4828 41.6819 23.7318 41.6723 24.0369C41.6628 24.3637 41.9137 24.619 42.244 24.6221C42.5774 24.6283 42.8315 24.3824 42.8346 24.0587Z" fill="white" />
                                <path d="M46.4961 16.9585C46.404 16.6752 46.3214 16.4324 46.2452 16.1896C45.9403 15.2434 46.1372 14.4123 46.8518 13.7026C47.1344 13.4224 47.4139 13.1423 47.7028 12.8683C48.3761 12.2364 49.1668 12.0279 50.0687 12.2707C50.6467 12.4263 51.2247 12.5913 51.7963 12.7687C52.6982 13.0458 53.1872 13.9267 52.9395 14.7982C52.695 15.6605 51.7963 16.1554 50.8785 15.9282C50.4657 15.8254 50.056 15.7072 49.5892 15.5827C49.6464 15.8037 49.6813 15.9904 49.7448 16.171C50.1418 17.2916 49.8782 18.2378 48.9826 19.0285C48.7445 19.237 48.5349 19.4736 48.303 19.6884C47.6457 20.2922 46.8708 20.4852 46.0038 20.2673C45.4068 20.1148 44.813 19.9374 44.2255 19.7506C43.4125 19.4923 42.9647 18.8012 43.0505 17.9764C43.1267 17.2324 43.7459 16.6285 44.5557 16.5538C44.8098 16.5289 45.0797 16.5912 45.3338 16.6472C45.7117 16.7313 46.0832 16.8464 46.4993 16.9616L46.4961 16.9585ZM48.0966 14.045C49.1097 14.3251 50.0973 14.599 51.0849 14.8698C51.4724 14.9757 51.7709 14.8325 51.8725 14.5056C51.9741 14.185 51.7931 13.8987 51.4089 13.7835C50.8785 13.6247 50.345 13.4722 49.8147 13.3166C49.386 13.1921 48.9795 13.2356 48.6238 13.5096C48.4396 13.6496 48.2967 13.8395 48.0934 14.045H48.0966ZM47.9093 18.5055C47.8775 18.49 47.8489 18.4651 47.814 18.4557C46.8422 18.1849 45.8736 17.9141 44.9019 17.6433C44.8257 17.6215 44.7399 17.6091 44.6605 17.6153C44.3938 17.634 44.1778 17.8332 44.1429 18.0853C44.1016 18.3717 44.2413 18.6207 44.5335 18.711C45.0353 18.8697 45.5434 19.0067 46.0483 19.153C46.8772 19.3927 47.398 19.2121 47.9093 18.4993V18.5055ZM48.7826 17.5842C48.7826 17.3165 48.827 17.0488 48.773 16.7997C48.6682 16.3204 48.5126 15.8535 48.3697 15.3834C48.3475 15.315 48.2967 15.2247 48.2395 15.2029C47.9347 15.0971 47.6234 15.013 47.2487 14.901C47.2487 15.2029 47.217 15.4581 47.2582 15.7041C47.3059 15.9749 47.4583 16.227 47.4964 16.4978C47.5917 17.1826 48.0014 17.5063 48.6682 17.5842C48.6778 17.5842 48.6873 17.5842 48.7857 17.5842H48.7826Z" fill="white" />
                                <path d="M36.1498 8.14319C36.2451 8.28015 36.3245 8.35174 36.3594 8.44201C36.4896 8.77508 36.5881 9.12059 36.7342 9.44432C36.7913 9.57505 36.9215 9.69956 37.0486 9.77116C37.3185 9.91746 37.6138 10.0171 37.8869 10.1571C37.9854 10.2069 38.1124 10.3252 38.1092 10.4093C38.1092 10.4964 37.9759 10.6054 37.8774 10.6552C37.6392 10.7797 37.3884 10.8949 37.1343 10.9851C36.8993 11.0692 36.7627 11.2061 36.6961 11.4427C36.604 11.7602 36.4833 12.0684 36.3563 12.3734C36.3213 12.4575 36.2165 12.5135 36.1435 12.582C36.08 12.5135 35.9879 12.4575 35.9561 12.3765C35.8196 12.0372 35.7148 11.6855 35.5687 11.3493C35.5147 11.2248 35.3972 11.1034 35.2733 11.038C34.9971 10.8886 34.6922 10.7828 34.4127 10.6396C34.3206 10.5929 34.1936 10.4778 34.2031 10.4124C34.2158 10.319 34.327 10.2069 34.4254 10.1603C34.7081 10.0171 35.0098 9.91123 35.2892 9.76493C35.4036 9.70579 35.5147 9.5875 35.5655 9.47233C35.7116 9.13616 35.8196 8.78442 35.9529 8.44513C35.9879 8.35486 36.0641 8.28015 36.1594 8.14319H36.1498Z" fill="white" />
                                <path d="M44.6417 9.18597C44.6671 8.5105 45.2514 7.97511 45.9342 8.00313C46.6075 8.02803 47.1537 8.59455 47.1378 9.24823C47.1219 9.92058 46.5312 10.4715 45.858 10.4466C45.1689 10.4217 44.6163 9.84899 44.6417 9.18597ZM45.8866 8.64747C45.569 8.64747 45.2959 8.9245 45.3023 9.23266C45.3086 9.54394 45.5881 9.80852 45.9056 9.79607C46.2169 9.78673 46.4741 9.52837 46.4773 9.22644C46.4773 8.91516 46.2041 8.64435 45.8866 8.64747Z" fill="white" />
                                <path d="M47.9348 22.6798C48.624 22.6829 49.1797 23.2369 49.1702 23.9124C49.1606 24.5785 48.6112 25.1108 47.9285 25.1108C47.2362 25.1108 46.6741 24.563 46.6773 23.8906C46.6773 23.2152 47.2394 22.6735 47.9348 22.6766V22.6798ZM47.9158 24.4634C48.2429 24.4665 48.5096 24.2143 48.5128 23.8968C48.5128 23.5825 48.2429 23.3241 47.919 23.3241C47.6014 23.3241 47.3473 23.57 47.341 23.8782C47.3314 24.1988 47.5887 24.4571 47.9158 24.4603V24.4634Z" fill="white" />
                                <path d="M51.4852 22.7295C51.4122 22.6268 51.355 22.5739 51.3296 22.5054C51.2407 22.2813 51.1835 22.0416 51.0756 21.8299C51.0089 21.6992 50.8914 21.5778 50.7643 21.5C50.5802 21.3879 50.3674 21.3257 50.1737 21.2261C50.1102 21.1949 50.0339 21.114 50.0339 21.058C50.0339 20.9988 50.107 20.9179 50.1705 20.8868C50.3706 20.784 50.5929 20.7156 50.7866 20.6035C50.9009 20.5381 51.012 20.4261 51.066 20.3109C51.1772 20.0774 51.2439 19.8253 51.3423 19.5856C51.3645 19.5296 51.4344 19.458 51.4852 19.4549C51.536 19.4549 51.6091 19.5265 51.6313 19.5825C51.7298 19.8222 51.7964 20.0743 51.9076 20.3078C51.9616 20.423 52.0695 20.535 52.1839 20.6004C52.3871 20.7187 52.6158 20.7903 52.8222 20.8992C52.9968 20.9895 53 21.1264 52.8222 21.2167C52.6126 21.3257 52.3839 21.3941 52.1807 21.5124C52.0664 21.5778 51.9616 21.6898 51.9044 21.805C51.7964 22.0291 51.7298 22.2719 51.6345 22.5054C51.6091 22.5739 51.5519 22.6299 51.482 22.7326L51.4852 22.7295Z" fill="white" />
                                <path d="M51.0406 8.73462C51.4756 8.72839 51.8281 9.05835 51.8408 9.48168C51.8536 9.89256 51.4979 10.2505 51.066 10.2568C50.6341 10.263 50.2752 9.9268 50.2689 9.50658C50.2625 9.08636 50.6055 8.73773 51.0406 8.73151V8.73462Z" fill="white" />
                                <path d="M45.8134 12.1556C45.8198 12.3766 45.6356 12.5727 45.4101 12.582C45.1846 12.5913 44.9814 12.4139 44.9687 12.1929C44.9528 11.9626 45.1497 11.7571 45.3879 11.7509C45.6102 11.7478 45.8102 11.9345 45.8166 12.1556H45.8134Z" fill="white" />
                                <path d="M29.9922 26.7792C29.9922 26.7605 29.9922 26.7294 30.0049 26.7076C30.2685 26.1037 30.5194 25.4905 30.8083 24.896C30.9258 24.6563 31.2402 24.6096 31.4816 24.7279C31.7198 24.8431 31.8595 25.1139 31.761 25.3567C31.5292 25.9263 31.2783 26.4897 31.0179 27.05C30.9036 27.2897 30.6432 27.3768 30.3923 27.3021C30.1541 27.2337 29.9922 27.0189 29.9954 26.7792H29.9922Z" fill="white" />
                                <path d="M32.8248 22.9785C32.6787 23.2618 32.5644 23.5668 32.3802 23.819C32.2373 24.0151 31.9832 24.0182 31.7578 23.903C31.5418 23.791 31.418 23.5419 31.491 23.3147C31.5641 23.0968 31.6562 22.8789 31.7673 22.6766C31.888 22.4556 32.1452 22.3684 32.377 22.4338C32.6184 22.5023 32.774 22.7077 32.8248 22.9785Z" fill="white" />
                            </g>
                            <defs>
                                <filter id="filter0_d_252_3" x="21" y="8" width="36" height="35" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
                                    <feFlood flood-opacity="0" result="BackgroundImageFix" />
                                    <feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha" />
                                    <feOffset dy="4" />
                                    <feGaussianBlur stdDeviation="2" />
                                    <feComposite in2="hardAlpha" operator="out" />
                                    <feColorMatrix type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.25 0" />
                                    <feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow_252_3" />
                                    <feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow_252_3" result="shape" />
                                </filter>
                                <clipPath id="clip0_252_3">
                                    <rect width="28" height="27" fill="white" transform="translate(25 8)" />
                                </clipPath>
                            </defs>
                        </svg>
                    </div>
                    <div style={{ backgroundImage: 'url(\'data:image/svg+xml,<svg width="292" height="281"  fill="none" xmlns="http://www.w3.org/2000/svg"><g clip-path="url(%23clip0_286_323)"><path d="M0 256.574C23.7786 202.667 47.5572 148.761 71.4021 94.8545C75.1444 86.3993 85.2784 79.9201 97.3996 82.1878C101.374 82.9329 105.282 84.0992 109.587 85.1682C112.667 78.3328 118.926 73.7326 124.258 68.4197C131.18 61.5518 139.592 59.5109 149.097 61.9405C152.11 62.718 155.091 63.5603 158.568 64.5322C157.244 59.8672 155.985 55.6234 154.859 51.3796C152.176 41.3045 158.303 31.845 168.735 29.8688C176.783 28.3462 185.294 32.9788 188.01 40.7862C190.361 47.5569 192.547 54.3924 194.17 61.3574C196.058 69.4887 193.905 76.8749 188.043 82.9977C184.665 86.5289 181.188 89.9628 177.578 93.2348C170.689 99.4871 162.609 101.301 153.567 98.904C150.554 98.0941 147.606 97.0898 143.831 95.8912C146.282 101.463 145.685 107.327 150.752 111.603C168.47 126.635 183.771 143.675 194.898 164.019C198.641 170.822 201.555 177.982 202.747 185.692C203.642 191.491 202.549 196.998 200.396 202.311C198.442 207.138 194.468 210.054 189.633 212.062C160.588 224.243 131.61 236.488 102.599 248.702C78.9861 258.647 55.373 268.592 31.76 278.506C17.1882 284.628 5.16638 279.089 0.430532 264.187C0.397414 264.025 0.165589 263.928 0.0662357 263.798C0.0662357 261.368 0.0662357 258.971 0.0662357 256.541L0 256.574ZM171.385 207.527C127.603 188.089 95.9424 156.795 75.1444 114.713C74.9788 115.037 74.5483 115.944 74.1508 116.851C67.3948 132.077 60.6388 147.336 53.8827 162.561C40.2051 193.402 26.5274 224.21 12.9822 255.083C12.0549 257.189 11.4588 259.846 11.8231 262.049C12.9491 268.625 19.5726 271.476 26.3949 268.592C58.2874 255.181 90.1799 241.736 122.072 228.292C138.631 221.327 155.19 214.362 171.418 207.527H171.385ZM146.348 122.682C146.017 123.039 145.752 123.266 145.553 123.557C141.181 129.647 135.121 132.207 127.736 130.911C120.582 129.647 116.012 125.177 113.992 118.309C112.038 111.635 110.15 104.93 108.163 98.2561C107.964 97.5758 107.302 96.7011 106.639 96.5067C102.4 95.2757 98.1282 93.6559 93.7897 93.2024C86.5038 92.4573 83.8875 95.5349 84.7817 102.662C85.7752 110.469 89.087 117.434 93.028 124.14C104.984 144.582 121.145 161.46 139.79 176.135C149.891 184.072 160.588 191.199 172.974 195.314C176.849 196.609 181.088 197.16 185.195 197.387C189.037 197.614 190.957 195.702 191.421 191.912C192.083 186.696 190.361 181.934 188.474 177.172C179.929 181.319 173.074 180.12 169.067 173.997C167.245 171.211 166.682 168.134 167.212 164.926C168.04 160.067 171.319 156.989 175.79 154.916C167.08 142.994 157.31 132.369 146.348 122.715V122.682ZM127.769 81.3132C120.748 85.9457 118.065 91.6474 119.853 98.2237C121.443 104.023 123.231 109.789 125.053 115.555C126.146 119.022 129.259 120.706 132.571 119.832C135.783 118.989 137.572 115.847 136.71 112.348C136.247 110.469 135.684 108.59 135.121 106.711C132.67 98.2885 130.219 89.8332 127.769 81.3132ZM175.127 80.1145C177.015 78.1384 178.306 76.7778 179.598 75.4495C182.91 71.9832 184.102 67.8366 182.943 63.3336C181.32 57.146 179.366 51.0232 177.412 44.9004C176.353 41.6933 173.273 40.1707 170.226 40.9805C166.947 41.8876 165.192 44.6413 165.92 48.0752C166.384 50.2457 167.046 52.3838 167.676 54.5219C170.093 62.8152 172.511 71.0761 175.127 80.1145ZM136.876 72.5987C138.002 76.1298 138.731 78.8187 139.724 81.4103C139.989 82.1554 140.784 82.9653 141.513 83.2245C146.811 85.0063 152.11 86.7232 157.442 88.2782C160.092 89.0557 162.807 88.9261 165.589 87.5007C164.563 84.3259 163.668 81.216 162.542 78.1708C162.311 77.5876 161.383 77.0369 160.688 76.8102C155.687 75.3523 150.719 73.765 145.652 72.6959C143.003 72.1452 140.155 72.5987 136.876 72.5987ZM185.99 167.129C185.99 163.793 183.307 161.104 179.896 161.136C176.617 161.136 173.968 163.728 173.869 166.903C173.769 170.304 176.386 172.96 179.83 172.993C183.307 173.058 185.957 170.498 185.99 167.129Z" fill="%2300966C" fill-opacity="0.07"/><path d="M224.175 93.2347C223.214 90.2867 222.353 87.7598 221.558 85.233C218.379 75.3847 220.432 66.7351 227.884 59.3488C230.831 56.4332 233.746 53.5176 236.759 50.6668C243.78 44.0905 252.027 41.92 261.432 44.4468C267.46 46.0666 273.487 47.7836 279.448 49.6301C288.854 52.5134 293.954 61.6813 291.371 70.7521C288.821 79.7257 279.448 84.8766 269.877 82.5117C265.572 81.4427 261.3 80.2117 256.431 78.9158C257.028 81.2159 257.392 83.1597 258.054 85.0386C262.194 96.701 259.445 106.549 250.106 114.778C247.622 116.948 245.436 119.41 243.019 121.646C236.163 127.93 228.083 129.939 219.041 127.671C212.815 126.084 206.622 124.237 200.495 122.294C192.017 119.605 187.348 112.413 188.242 103.828C189.037 96.0855 195.495 89.8008 203.94 89.0233C206.589 88.7641 209.404 89.412 212.053 89.9951C215.995 90.8698 219.869 92.0685 224.208 93.2671L224.175 93.2347ZM240.866 62.9124C251.431 65.828 261.73 68.6788 272.03 71.4972C276.07 72.5987 279.183 71.1085 280.243 67.7069C281.303 64.3702 279.415 61.3898 275.408 60.1911C269.877 58.5389 264.313 56.9516 258.783 55.3318C254.312 54.036 250.073 54.4895 246.364 57.3403C244.443 58.7981 242.952 60.7743 240.833 62.9124H240.866ZM238.912 109.335C238.581 109.173 238.283 108.914 237.919 108.817C227.784 105.999 217.684 103.18 207.549 100.362C206.755 100.135 205.86 100.005 205.033 100.07C202.251 100.265 199.999 102.338 199.634 104.962C199.204 107.942 200.661 110.534 203.708 111.473C208.94 113.126 214.239 114.551 219.505 116.074C228.149 118.568 233.58 116.689 238.912 109.271V109.335ZM248.019 99.7462C248.019 96.9602 248.483 94.1742 247.92 91.5825C246.827 86.5936 245.204 81.7342 243.714 76.8425C243.482 76.1298 242.952 75.1903 242.356 74.9636C239.177 73.8621 235.931 72.9874 232.024 71.8212C232.024 74.9636 231.692 77.62 232.123 80.1793C232.62 82.9977 234.209 85.6217 234.607 88.4401C235.6 95.5672 239.872 98.9363 246.827 99.7462C246.927 99.7462 247.026 99.7462 248.053 99.7462H248.019Z" fill="%2300966C" fill-opacity="0.07"/><path d="M116.277 1.49017C117.27 2.91558 118.098 3.66068 118.463 4.60016C119.82 8.06649 120.847 11.6624 122.37 15.0316C122.967 16.3922 124.324 17.688 125.649 18.4331C128.464 19.9557 131.544 20.9924 134.392 22.4502C135.419 22.9685 136.744 24.1995 136.71 25.0742C136.71 25.9813 135.319 27.1151 134.293 27.6335C131.809 28.9293 129.193 30.1279 126.543 31.0674C124.093 31.9421 122.668 33.3675 121.973 35.8296C121.013 39.1339 119.754 42.3411 118.429 45.5159C118.065 46.3906 116.972 46.9737 116.21 47.6864C115.548 46.9737 114.588 46.3906 114.257 45.5483C112.832 42.0172 111.74 38.3564 110.216 34.8577C109.653 33.5619 108.428 32.2985 107.136 31.6181C104.255 30.0632 101.076 28.9617 98.1613 27.4715C97.2009 26.9856 95.8761 25.7869 95.9755 25.1066C96.108 24.1347 97.2671 22.9685 98.2937 22.4826C101.241 20.9924 104.387 19.8909 107.302 18.3683C108.494 17.7528 109.653 16.5218 110.183 15.3231C111.706 11.8244 112.832 8.16368 114.223 4.63255C114.588 3.69308 115.383 2.91558 116.376 1.49017H116.277Z" fill="%2300966C" fill-opacity="0.07"/><path d="M204.834 12.3428C205.099 5.31292 211.192 -0.259135 218.313 0.0324262C225.334 0.291592 231.03 6.1876 230.864 12.9907C230.699 19.9882 224.539 25.7222 217.518 25.463C210.331 25.2039 204.569 19.2431 204.834 12.3428ZM217.816 6.73833C214.504 6.73833 211.656 9.62154 211.722 12.8287C211.788 16.0683 214.703 18.8219 218.015 18.6923C221.26 18.5951 223.943 15.9063 223.976 12.7639C223.976 9.52436 221.128 6.70593 217.816 6.73833Z" fill="%2300966C" fill-opacity="0.07"/><path d="M239.177 152.778C246.364 152.81 252.159 158.577 252.06 165.607C251.961 172.539 246.231 178.079 239.111 178.079C231.891 178.079 226.029 172.377 226.062 165.38C226.062 158.35 231.924 152.713 239.177 152.746V152.778ZM238.978 171.341C242.389 171.373 245.171 168.749 245.205 165.445C245.205 162.173 242.389 159.484 239.011 159.484C235.7 159.484 233.05 162.043 232.984 165.25C232.885 168.587 235.567 171.276 238.978 171.308V171.341Z" fill="%2300966C" fill-opacity="0.07"/><path d="M276.203 153.296C275.441 152.227 274.845 151.677 274.58 150.964C273.653 148.631 273.057 146.137 271.931 143.934C271.235 142.573 270.01 141.31 268.685 140.5C266.764 139.334 264.545 138.686 262.525 137.649C261.863 137.325 261.068 136.483 261.068 135.9C261.068 135.284 261.83 134.442 262.492 134.118C264.578 133.049 266.897 132.336 268.917 131.17C270.109 130.49 271.268 129.324 271.831 128.125C272.99 125.695 273.686 123.071 274.712 120.577C274.944 119.994 275.673 119.248 276.203 119.216C276.733 119.216 277.494 119.961 277.726 120.544C278.753 123.039 279.448 125.663 280.607 128.092C281.17 129.291 282.296 130.457 283.489 131.138C285.608 132.369 287.993 133.114 290.145 134.248C291.967 135.187 292 136.613 290.145 137.552C287.96 138.686 285.575 139.399 283.456 140.63C282.263 141.31 281.17 142.476 280.574 143.675C279.448 146.007 278.753 148.534 277.759 150.964C277.494 151.677 276.898 152.26 276.17 153.329L276.203 153.296Z" fill="%2300966C" fill-opacity="0.07"/><path d="M271.566 7.64537C276.104 7.58058 279.78 11.0145 279.912 15.4203C280.045 19.6966 276.335 23.4221 271.831 23.4869C267.327 23.5516 263.585 20.0529 263.519 15.6795C263.452 11.3061 267.029 7.67777 271.566 7.61298V7.64537Z" fill="%2300966C" fill-opacity="0.07"/><path d="M217.054 43.2482C217.121 45.5483 215.2 47.5892 212.848 47.6864C210.497 47.7836 208.377 45.9371 208.245 43.637C208.079 41.2397 210.133 39.1016 212.617 39.0368C214.935 39.0044 217.021 40.9481 217.087 43.2482H217.054Z" fill="%2300966C" fill-opacity="0.07"/><path d="M52.0613 195.443C52.0613 195.249 52.0613 194.925 52.1938 194.698C54.9425 188.413 57.5588 182.031 60.5726 175.844C61.7979 173.349 65.0766 172.863 67.5935 174.094C70.0774 175.293 71.5346 178.111 70.5079 180.638C68.0903 186.567 65.474 192.43 62.7583 198.261C61.5661 200.756 58.8504 201.663 56.2341 200.886C53.7503 200.173 52.0613 197.938 52.0944 195.443H52.0613Z" fill="%2300966C" fill-opacity="0.07"/><path d="M81.6024 155.888C80.0789 158.836 78.8867 162.011 76.9659 164.635C75.4756 166.676 72.8261 166.708 70.4748 165.509C68.2228 164.343 66.9312 161.752 67.6929 159.387C68.4546 157.119 69.415 154.851 70.5741 152.746C71.8326 150.445 74.5151 149.538 76.9327 150.219C79.4497 150.931 81.0725 153.069 81.6024 155.888Z" fill="%2300966C" fill-opacity="0.07"/></g><defs><clipPath id="clip0_286_323"><rect width="292" height="281" fill="white"/></clipPath></defs></svg>\')' }}>
                        {formEntries.slice(currentIndex1, currentIndex1 + 3).map((entry, index) => (
                            <div key={index} style={{ display: 'flex', marginBottom: '10px', transition: 'transform 0.5s' }}>
                                <svg width="48" height="48" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <path d="M4 16.5V20C4 20.5304 4.21071 21.0391 4.58579 21.4142C4.96086 21.7893 5.46957 22 6 22H18C18.5304 22 19.0391 21.7893 19.4142 21.4142C19.7893 21.0391 20 20.5304 20 20V16.5M3 14V13C3 12.4696 3.21071 11.9609 3.58579 11.5858C3.96086 11.2107 4.46957 11 5 11H19C19.5304 11 20.0391 11.2107 20.4142 11.5858C20.7893 11.9609 21 12.4696 21 13V14M12 8V11M12 8C13.262 8 14 7.032 14 5.375C14 3.718 12 2 12 2C12 2 10 3.718 10 5.375C10 7.032 10.738 8 12 8Z" stroke="#00966C" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" />
                                    <path d="M3 14C3 14.7956 3.31607 15.5587 3.87868 16.1213C4.44129 16.6839 5.20435 17 6 17C6.79565 17 7.55871 16.6839 8.12132 16.1213C8.68393 15.5587 9 14.7956 9 14C9 14.7956 9.31607 15.5587 9.87868 16.1213C10.4413 16.6839 11.2044 17 12 17C12.7956 17 13.5587 16.6839 14.1213 16.1213C14.6839 15.5587 15 14.7956 15 14C15 14.7956 15.3161 15.5587 15.8787 16.1213C16.4413 16.6839 17.2044 17 18 17C18.7956 17 19.5587 16.6839 20.1213 16.1213C20.6839 15.5587 21 14.7956 21 14" stroke="#00966C" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" />
                                </svg>
                                <div style={{ width: '1px' }}></div>
                                <div className="card" style={{ minWidth: '300px', border: '1px solid #ccc', borderRadius: '5px', padding: '10px', backgroundColor: 'transparent', marginLeft: '10px', transition: 'transform 0.5s', fontFamily: 'Montserrat, sans-serif' }}>
                                    <div style={{ fontSize: '16px', fontWeight: 'bold', marginBottom: '5px', color: '#044123', fontFamily: 'Montserrat' }}>{entry.Nom} {entry.Prenom}</div>
                                    <div style={{ fontSize: '16px', color: '#044123', fontFamily: 'Montserrat' }}>We wish you all a happy birthday!</div>
                                </div>

                            </div>
                        ))}
                    </div>
                </div>

                <div style={{ marginBottom: '10px' }}></div>

                <div style={{ width: '33%', display: 'flex', justifyContent: 'left', alignItems: 'left' }}>    {/* Contenu du milieu */}
                    <div>
                        <div className={styles.LatestNews_container}>

                            <div className={styles.LN_left}>
                                <div className={styles.video_container}>
                                    {videos.map((videoUrl, index) => (
                                        <div className={styles.video_holder}>

                                            <video ref={videoRef} src={videoUrl} controls style={{ width: '100%', height: '100%' }} onClick={handleTogglePlay} />
                                        </div>
                                    ))}
                                    {!isPlaying && (
                                        <div className={styles.PlayBtn}>
                                            <div className={styles.BTN_CIRCLE}></div>
                                            <div className={styles.PlayIcon}>
                                                <button className={styles.Play} onClick={handleTogglePlay}>

                                                    <svg width="49" height="55" viewBox="0 0 49 55" fill="none" xmlns="http://www.w3.org/2000/svg">
                                                        <path d="M47.3047 25.8401C49.2907 27.0187 49.2561 29.9052 47.2424 31.0359L5.42737 54.5145C3.41368 55.6452 0.93115 54.172 0.958814 51.8627L1.53327 3.91052C1.56093 1.60128 4.07804 0.187951 6.06407 1.36653L47.3047 25.8401Z" fill="#58C1A3" />
                                                    </svg>
                                                </button>
                                            </div>
                                        </div>
                                    )}
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>




            <div style={{ width: '33%', display: 'flex', flexDirection: 'column' }}>
                <section className={styles.jobsApi} style={{ height: '66%', display: 'flex', flexDirection: 'column' }}>
                    <div className={styles.container_title}>
                        <p>offres d'emploi interne</p>
                    </div>
                    <div className={styles.Jobs_container}>
                        <div className={styles.job_navigation_bar}>
                            <div className={styles.serch_icon}>
                                <svg
                                    id="serch_icon"
                                    width="25"
                                    height="25"
                                    viewBox="0 0 25 25"
                                    fill="none"
                                    xmlns="http://www.w3.org/2000/svg"
                                >
                                    <path
                                        d="M6.75 18.25L1 24"
                                        stroke="#9A9A9A"
                                        strokeLinecap="round"
                                        strokeLinejoin="round"
                                    />
                                    <path
                                        d="M24 10.8571C24 16.3011 19.5868 20.7143 14.1429 20.7143C11.4162 20.7143 8.94798 19.6072 7.16351 17.8179C5.38511 16.0349 4.28571 13.5744 4.28571 10.8571C4.28571 5.41319 8.69892 1 14.1429 1C19.5868 1 24 5.41319 24 10.8571Z"
                                        stroke="#9A9A9A"
                                        strokeLinecap="round"
                                        strokeLinejoin="round"
                                    />
                                </svg>
                            </div>
                            <input
                                className={styles.job_search_input}
                                type="text"
                                placeholder="Search for job titles..."
                                value={searchTerm}
                                onChange={handleSearch}
                            />
                        </div>
                        <div className={styles.Jobs_holder_scroller}>
                            {filteredJobs.map((job: InternalOffersItem, index: number) => (
                                <div>
                                    {job.fileUrl ? (
                                        <div key={index} className={styles.jobs_display_container} onClick={() => window.open(job.fileUrl, '_blank')} >
                                            <div className={styles.jobs_display}>
                                                <div className={styles.ACI}>
                                                    <p>ACI</p>
                                                </div>
                                                <div className={styles.job_title}>
                                                    <h2>{job.offre_title}</h2>
                                                </div>
                                                <div className={styles.job_description}>
                                                    <p>{job.short_description}</p>
                                                </div>
                                                <div className={styles.card_button}>
                                                    <div className={styles.lieu}>
                                                        <svg width="16" height="20" viewBox="0 0 16 20" fill="none" xmlns="http://www.w3.org/2000/svg">
                                                            <path d="M8.00008 0C3.58908 0 8.14446e-05 3.589 8.14446e-05 7.995C-0.0289186 14.44 7.69608 19.784 8.00008 20C8.00008 20 16.0291 14.44 16.0001 8C16.0001 3.589 12.4111 0 8.00008 0ZM8.00008 12C5.79008 12 4.00008 10.21 4.00008 8C4.00008 5.79 5.79008 4 8.00008 4C10.2101 4 12.0001 5.79 12.0001 8C12.0001 10.21 10.2101 12 8.00008 12Z" fill="#00966C" />
                                                        </svg>

                                                        <p>
                                                            {job.city}
                                                        </p>
                                                    </div>
                                                    <div style={{ display: 'flex', gap: '3px' }}>
                                                        <svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
                                                            <path d="M1.6665 7.50002C1.6665 5.92835 1.6665 5.14335 2.15484 4.65502C2.64317 4.16669 3.42817 4.16669 4.99984 4.16669H14.9998C16.5715 4.16669 17.3565 4.16669 17.8448 4.65502C18.3332 5.14335 18.3332 5.92835 18.3332 7.50002C18.3332 7.89252 18.3332 8.08919 18.2115 8.21169C18.089 8.33335 17.8915 8.33335 17.4998 8.33335H2.49984C2.10734 8.33335 1.91067 8.33335 1.78817 8.21169C1.6665 8.08919 1.6665 7.89169 1.6665 7.50002ZM1.6665 15C1.6665 16.5717 1.6665 17.3567 2.15484 17.845C2.64317 18.3334 3.42817 18.3334 4.99984 18.3334H14.9998C16.5715 18.3334 17.3565 18.3334 17.8448 17.845C18.3332 17.3567 18.3332 16.5717 18.3332 15V10.8334C18.3332 10.4409 18.3332 10.2442 18.2115 10.1217C18.089 10 17.8915 10 17.4998 10H2.49984C2.10734 10 1.91067 10 1.78817 10.1217C1.6665 10.2442 1.6665 10.4417 1.6665 10.8334V15Z" fill="#00966C" />
                                                            <path d="M5.83301 2.5V5M14.1663 2.5V5" stroke="#00966C" stroke-width="2" stroke-linecap="round" />
                                                        </svg>

                                                        <p>
                                                            {formatDeadline(job.deadline)}
                                                        </p>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    ) : ('-')

                                    }
                                </div>
                            ))}
                        </div>
                    </div>
                </section>
            </div>




            <div style={{ display: 'flex', justifyContent: 'left', marginTop: '10px', backgroundColor: '#fff' }}>
                <div style={{ width: '66%', padding: '10px', marginLeft: 0 }}>
                    <div>
                        <div className={styles.ImageContainer}>
                            <div className={styles.image_holder}>
                                <img src={images[currentIndex]} alt="Slide" />
                            </div>
                            <div className={styles.Navigation_btn}>
                                <button className={styles.prevBtn} onClick={goToPrevSlide}>
                                    <svg width="15" height="27" viewBox="0 0 15 27" fill="none" xmlns="http://www.w3.org/2000/svg">
                                        <path d="M6.74178 20.4324L0.309099 14.1945C-0.103029 13.7948 -0.10303 13.2051 0.309098 12.8055L12.7412 0.749781C13.517 -0.00247461 15 0.453514 15 1.44429L15 12.1741L6.74178 20.4324Z" fill="white" />
                                        <path opacity="0.5" d="M15 14.8258L15 25.5557C15 26.5465 13.517 27.0024 12.7412 26.2502L8.08798 21.7378L15 14.8258Z" fill="white" />
                                    </svg>
                                </button>
                                <button className={styles.nextBtn} onClick={goToNextSlide}>
                                    <svg width="15" height="27" viewBox="0 0 15 27" fill="none" xmlns="http://www.w3.org/2000/svg">
                                        <path d="M8.25822 6.56763L14.6909 12.8055C15.103 13.2052 15.103 13.7949 14.6909 14.1945L2.25876 26.2502C1.48301 27.0025 4.33083e-08 26.5465 0 25.5557V14.8259L8.25822 6.56763Z" fill="white" />
                                        <path opacity="0.5" d="M4.47035e-07 12.1742L0 1.44432C-4.33083e-08 0.45354 1.48301 -0.00244924 2.25875 0.749806L6.91202 5.26216L4.47035e-07 12.1742Z" fill="white" />
                                    </svg>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>


    );

};

export default Qlinks;
